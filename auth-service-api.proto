syntax = "proto3";

package influenzanet.auth_service_api;
option go_package = "github.com/influenzanet/api/dist/go/auth-service";

import "global-types.proto";
import "google/protobuf/empty.proto";

message EncodedToken {
    string token = 1;
}

message TempTokenInfo {
  string token = 1;
  int64 expiration = 2;
  string purpose = 3;
  string user_id = 4;
  string info = 5;
  string instance_id = 6;
}

message TempTokenInfoResponse {
  TempTokenInfo temp_token = 1;
  influenzanet.Status status = 2;
}

message TempTokenInfos {
  repeated TempTokenInfo temp_tokens = 1;
  influenzanet.Status status = 2;
}

message TempToken {
  string token = 1;
}

message TempTokenResponse {
  TempToken temp_token = 1;
  influenzanet.Status status = 2;
}

service AuthServiceApi {
    rpc Status(google.protobuf.Empty) returns (influenzanet.Status);

    // Auth:
    rpc LoginWithEmail(influenzanet.UserCredentials) returns (EncodedToken);
    rpc SignupWithEmail(influenzanet.UserCredentials) returns (EncodedToken);

    // Token handling:
    rpc ValidateJWT(EncodedToken) returns (influenzanet.ParsedToken);
    rpc RenewJWT(EncodedToken) returns (EncodedToken);

    // Temporary Tokens handling:
    rpc GenerateToken(TempTokenInfo) returns (TempTokenResponse);
    rpc ValdateToken(TempToken) returns (TempTokenInfoResponse);
    rpc GetTokensByUser(TempTokenInfo) returns (TempTokenInfos);
    rpc DeleteToken(TempToken) returns (influenzanet.Status);
}
