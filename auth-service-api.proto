syntax = "proto3";

package influenzanet.auth_service_api;
option go_package = "api";

import "global-types.proto";
import "google/protobuf/empty.proto";


service AuthServiceApi {
    rpc Status(google.protobuf.Empty) returns (influenzanet.Status);

    // Auth:
    rpc LoginWithEmail(influenzanet.UserCredentials) returns (TokenResponse);
    rpc SignupWithEmail(influenzanet.UserCredentials) returns (TokenResponse);

    // Token handling:
    rpc ValidateJWT(JWTRequest) returns (influenzanet.TokenInfos);
    rpc RenewJWT(RefreshJWTRequest) returns (TokenResponse);

    // Temporary Tokens handling:
    rpc GenerateTempToken(TempTokenInfo) returns (TempToken);
    rpc ValidateTempToken(TempToken) returns (TempTokenInfo);
    rpc GetTempTokens(TempTokenInfo) returns (TempTokenInfos); // by user_id, instance and/or type
    rpc DeleteTempToken(TempToken) returns (influenzanet.Status);
    rpc PurgeUserTempTokens(TempTokenInfo) returns (influenzanet.Status);
}


message JWTRequest {
    string token = 1;
}

message RefreshJWTRequest {
    string refresh_token = 1;
    string access_token = 2;
}

message TempTokenInfo {
  string token = 1;
  int64 expiration = 2;
  string purpose = 3;
  string user_id = 4;
  string info = 5;
  string instance_id = 6;
}

message TempTokenInfos {
  repeated TempTokenInfo temp_tokens = 1;
}

message TempToken {
  string token = 1;
}

message TokenResponse {
    string access_token = 1;
    string refresh_token = 2;
    int32 expires_in = 3;
}
