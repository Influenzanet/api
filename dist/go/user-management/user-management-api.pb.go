// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user-management-api.proto

package user_management

import (
	context "context"
	fmt "fmt"
	_go "github.com/Influenzanet/api/dist/go"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Profile struct {
	FirstName            string   `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_23188efcd8e5ff27, []int{0}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Profile) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type NewUser struct {
	Auth                 *_go.UserCredentials `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Profile              *Profile             `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NewUser) Reset()         { *m = NewUser{} }
func (m *NewUser) String() string { return proto.CompactTextString(m) }
func (*NewUser) ProtoMessage()    {}
func (*NewUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_23188efcd8e5ff27, []int{1}
}

func (m *NewUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewUser.Unmarshal(m, b)
}
func (m *NewUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewUser.Marshal(b, m, deterministic)
}
func (m *NewUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewUser.Merge(m, src)
}
func (m *NewUser) XXX_Size() int {
	return xxx_messageInfo_NewUser.Size(m)
}
func (m *NewUser) XXX_DiscardUnknown() {
	xxx_messageInfo_NewUser.DiscardUnknown(m)
}

var xxx_messageInfo_NewUser proto.InternalMessageInfo

func (m *NewUser) GetAuth() *_go.UserCredentials {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *NewUser) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UserAuthInfo struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Roles                []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	InstanceId           string   `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAuthInfo) Reset()         { *m = UserAuthInfo{} }
func (m *UserAuthInfo) String() string { return proto.CompactTextString(m) }
func (*UserAuthInfo) ProtoMessage()    {}
func (*UserAuthInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23188efcd8e5ff27, []int{2}
}

func (m *UserAuthInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAuthInfo.Unmarshal(m, b)
}
func (m *UserAuthInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAuthInfo.Marshal(b, m, deterministic)
}
func (m *UserAuthInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAuthInfo.Merge(m, src)
}
func (m *UserAuthInfo) XXX_Size() int {
	return xxx_messageInfo_UserAuthInfo.Size(m)
}
func (m *UserAuthInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAuthInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserAuthInfo proto.InternalMessageInfo

func (m *UserAuthInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserAuthInfo) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *UserAuthInfo) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type UserReference struct {
	Auth                 *_go.ParsedToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	UserId               string           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserReference) Reset()         { *m = UserReference{} }
func (m *UserReference) String() string { return proto.CompactTextString(m) }
func (*UserReference) ProtoMessage()    {}
func (*UserReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_23188efcd8e5ff27, []int{3}
}

func (m *UserReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReference.Unmarshal(m, b)
}
func (m *UserReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReference.Marshal(b, m, deterministic)
}
func (m *UserReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReference.Merge(m, src)
}
func (m *UserReference) XXX_Size() int {
	return xxx_messageInfo_UserReference.Size(m)
}
func (m *UserReference) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReference.DiscardUnknown(m)
}

var xxx_messageInfo_UserReference proto.InternalMessageInfo

func (m *UserReference) GetAuth() *_go.ParsedToken {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *UserReference) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type PasswordChangeMsg struct {
	Auth                 *_go.ParsedToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	OldPassword          string           `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword          string           `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PasswordChangeMsg) Reset()         { *m = PasswordChangeMsg{} }
func (m *PasswordChangeMsg) String() string { return proto.CompactTextString(m) }
func (*PasswordChangeMsg) ProtoMessage()    {}
func (*PasswordChangeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_23188efcd8e5ff27, []int{4}
}

func (m *PasswordChangeMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordChangeMsg.Unmarshal(m, b)
}
func (m *PasswordChangeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordChangeMsg.Marshal(b, m, deterministic)
}
func (m *PasswordChangeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordChangeMsg.Merge(m, src)
}
func (m *PasswordChangeMsg) XXX_Size() int {
	return xxx_messageInfo_PasswordChangeMsg.Size(m)
}
func (m *PasswordChangeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordChangeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordChangeMsg proto.InternalMessageInfo

func (m *PasswordChangeMsg) GetAuth() *_go.ParsedToken {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *PasswordChangeMsg) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *PasswordChangeMsg) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func init() {
	proto.RegisterType((*Profile)(nil), "influenzanet.user_management_api.Profile")
	proto.RegisterType((*NewUser)(nil), "influenzanet.user_management_api.NewUser")
	proto.RegisterType((*UserAuthInfo)(nil), "influenzanet.user_management_api.UserAuthInfo")
	proto.RegisterType((*UserReference)(nil), "influenzanet.user_management_api.UserReference")
	proto.RegisterType((*PasswordChangeMsg)(nil), "influenzanet.user_management_api.PasswordChangeMsg")
}

func init() { proto.RegisterFile("user-management-api.proto", fileDescriptor_23188efcd8e5ff27) }

var fileDescriptor_23188efcd8e5ff27 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x6b, 0x53, 0x31,
	0x14, 0xa6, 0x9d, 0xae, 0xf6, 0x74, 0x4e, 0x16, 0x86, 0x6e, 0x1d, 0xc3, 0xda, 0xa7, 0xf9, 0xd0,
	0x5c, 0x6c, 0xd1, 0xf7, 0x59, 0xfa, 0x50, 0x70, 0xa3, 0x74, 0xca, 0x40, 0xc1, 0x92, 0xf6, 0x9e,
	0x9b, 0x06, 0x73, 0x93, 0x90, 0xe4, 0x52, 0xe6, 0x9b, 0x6f, 0xfe, 0xc7, 0xbe, 0x4a, 0xee, 0x8f,
	0xb5, 0x1d, 0xe2, 0xb6, 0xc7, 0xe4, 0x7c, 0xe7, 0xcb, 0xf7, 0x9d, 0xf3, 0x11, 0x38, 0xce, 0x1c,
	0xda, 0x5e, 0xca, 0x14, 0xe3, 0x98, 0xa2, 0xf2, 0x3d, 0x66, 0x04, 0x35, 0x56, 0x7b, 0x4d, 0x3a,
	0x42, 0x25, 0x32, 0x43, 0xf5, 0x93, 0x29, 0xf4, 0x34, 0xe0, 0x66, 0x6b, 0xdc, 0x8c, 0x19, 0xd1,
	0x26, 0x5c, 0xea, 0x39, 0x93, 0x3d, 0x7f, 0x63, 0xd0, 0x15, 0x5d, 0xed, 0x13, 0xae, 0x35, 0x97,
	0x18, 0xe5, 0xa7, 0x79, 0x96, 0x44, 0x98, 0x1a, 0x7f, 0x53, 0x14, 0xbb, 0x23, 0x68, 0x4c, 0xac,
	0x4e, 0x84, 0x44, 0x72, 0x0a, 0x90, 0x08, 0xeb, 0xfc, 0x4c, 0xb1, 0x14, 0x8f, 0x6a, 0x9d, 0xda,
	0x59, 0x73, 0xda, 0xcc, 0x6f, 0x2e, 0x59, 0x8a, 0xe4, 0x04, 0x9a, 0x92, 0x55, 0xd5, 0x7a, 0x5e,
	0x7d, 0x16, 0x2e, 0x42, 0xb1, 0xfb, 0xab, 0x06, 0x8d, 0x4b, 0x5c, 0x7d, 0x71, 0x68, 0xc9, 0x3b,
	0x78, 0xc2, 0x32, 0xbf, 0xcc, 0x19, 0x5a, 0xfd, 0x53, 0xba, 0x25, 0x3a, 0x20, 0x86, 0x16, 0x63,
	0x54, 0x5e, 0x30, 0xe9, 0xa6, 0x39, 0x94, 0x0c, 0xa1, 0x61, 0x0a, 0x15, 0x39, 0x73, 0xab, 0xff,
	0x96, 0xde, 0x67, 0x95, 0x96, 0xb2, 0xa7, 0x55, 0x67, 0xf7, 0x3b, 0xec, 0x05, 0xf6, 0xf3, 0xcc,
	0x2f, 0xc7, 0x2a, 0xd1, 0xe4, 0x15, 0x34, 0xf2, 0x3e, 0x11, 0x97, 0x66, 0x76, 0xc3, 0x71, 0x1c,
	0x93, 0x43, 0x78, 0x6a, 0xb5, 0x44, 0x77, 0x54, 0xef, 0xec, 0x9c, 0x35, 0xa7, 0xc5, 0x81, 0xbc,
	0x86, 0x96, 0x50, 0xce, 0x33, 0xb5, 0xc0, 0xd0, 0xb2, 0x93, 0xb7, 0x40, 0x75, 0x35, 0x8e, 0xbb,
	0xd7, 0xf0, 0x3c, 0xf0, 0x4f, 0x31, 0x41, 0x8b, 0x6a, 0x81, 0xa4, 0xb7, 0x65, 0xf4, 0x78, 0x5b,
	0xf2, 0x84, 0x59, 0x87, 0xf1, 0x67, 0xfd, 0x03, 0x55, 0x69, 0x72, 0x43, 0x4f, 0x7d, 0x53, 0x4f,
	0xf7, 0x77, 0x0d, 0x0e, 0x26, 0xcc, 0xb9, 0x95, 0xb6, 0xf1, 0x70, 0xc9, 0x14, 0xc7, 0x0b, 0xc7,
	0x1f, 0xcb, 0xfe, 0x06, 0xf6, 0xb4, 0x8c, 0x67, 0xa6, 0xe4, 0x29, 0x9f, 0x68, 0x69, 0x19, 0x57,
	0xd4, 0x01, 0xa2, 0x70, 0xb5, 0x86, 0x14, 0x16, 0x5b, 0x0a, 0x57, 0x15, 0xa4, 0xff, 0xa7, 0x0e,
	0x07, 0xc1, 0xe4, 0xc5, 0xed, 0xac, 0xcf, 0x8d, 0x20, 0x1f, 0x60, 0xf7, 0xca, 0x33, 0x9f, 0x39,
	0xf2, 0x92, 0x16, 0x61, 0xa2, 0x55, 0x98, 0xe8, 0x28, 0x84, 0xa9, 0x7d, 0xb8, 0x2d, 0xaf, 0x44,
	0xcf, 0x60, 0xff, 0x93, 0xe6, 0x42, 0x5d, 0x0b, 0xbf, 0x1c, 0xa5, 0x4c, 0x48, 0xf2, 0xff, 0x34,
	0xb4, 0xe9, 0xfd, 0x6b, 0xdf, 0x5a, 0xb1, 0x84, 0x17, 0x57, 0x82, 0xab, 0xcc, 0xac, 0x5f, 0x78,
	0x40, 0x72, 0xca, 0xa0, 0x3e, 0xfa, 0xb5, 0x6f, 0xb0, 0x5f, 0xac, 0xe7, 0x76, 0xa2, 0x83, 0x07,
	0xc4, 0xf4, 0xee, 0x62, 0xff, 0x3d, 0xab, 0x8f, 0xef, 0xbf, 0x0e, 0xb8, 0xf0, 0xcb, 0x6c, 0x4e,
	0x17, 0x3a, 0x8d, 0xc6, 0x1b, 0x88, 0x88, 0x19, 0x11, 0xc5, 0xc2, 0xf9, 0x88, 0xeb, 0xe8, 0xce,
	0xe7, 0x30, 0xdf, 0xcd, 0x17, 0x31, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xbd, 0xd8, 0xac,
	0x36, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserManagementApiClient is the client API for UserManagementApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserManagementApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*_go.Status, error)
	// Auth and Token handling:
	LoginWithEmail(ctx context.Context, in *_go.UserCredentials, opts ...grpc.CallOption) (*UserAuthInfo, error)
	SignupWithEmail(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*UserAuthInfo, error)
	ChangePassword(ctx context.Context, in *PasswordChangeMsg, opts ...grpc.CallOption) (*_go.Status, error)
}

type userManagementApiClient struct {
	cc *grpc.ClientConn
}

func NewUserManagementApiClient(cc *grpc.ClientConn) UserManagementApiClient {
	return &userManagementApiClient{cc}
}

func (c *userManagementApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*_go.Status, error) {
	out := new(_go.Status)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) LoginWithEmail(ctx context.Context, in *_go.UserCredentials, opts ...grpc.CallOption) (*UserAuthInfo, error) {
	out := new(UserAuthInfo)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/LoginWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) SignupWithEmail(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*UserAuthInfo, error) {
	out := new(UserAuthInfo)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/SignupWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ChangePassword(ctx context.Context, in *PasswordChangeMsg, opts ...grpc.CallOption) (*_go.Status, error) {
	out := new(_go.Status)
	err := c.cc.Invoke(ctx, "/influenzanet.user_management_api.UserManagementApi/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementApiServer is the server API for UserManagementApi service.
type UserManagementApiServer interface {
	Status(context.Context, *empty.Empty) (*_go.Status, error)
	// Auth and Token handling:
	LoginWithEmail(context.Context, *_go.UserCredentials) (*UserAuthInfo, error)
	SignupWithEmail(context.Context, *NewUser) (*UserAuthInfo, error)
	ChangePassword(context.Context, *PasswordChangeMsg) (*_go.Status, error)
}

func RegisterUserManagementApiServer(s *grpc.Server, srv UserManagementApiServer) {
	s.RegisterService(&_UserManagementApi_serviceDesc, srv)
}

func _UserManagementApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_LoginWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.UserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).LoginWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/LoginWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).LoginWithEmail(ctx, req.(*_go.UserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_SignupWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).SignupWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/SignupWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).SignupWithEmail(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.user_management_api.UserManagementApi/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ChangePassword(ctx, req.(*PasswordChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManagementApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.user_management_api.UserManagementApi",
	HandlerType: (*UserManagementApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _UserManagementApi_Status_Handler,
		},
		{
			MethodName: "LoginWithEmail",
			Handler:    _UserManagementApi_LoginWithEmail_Handler,
		},
		{
			MethodName: "SignupWithEmail",
			Handler:    _UserManagementApi_SignupWithEmail_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserManagementApi_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-management-api.proto",
}
