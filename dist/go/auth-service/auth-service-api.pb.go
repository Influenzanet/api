// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth-service-api.proto

package auth_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_go "github.com/influenzanet/api/dist/go"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EncodedToken struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncodedToken) Reset()         { *m = EncodedToken{} }
func (m *EncodedToken) String() string { return proto.CompactTextString(m) }
func (*EncodedToken) ProtoMessage()    {}
func (*EncodedToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{0}
}

func (m *EncodedToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncodedToken.Unmarshal(m, b)
}
func (m *EncodedToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncodedToken.Marshal(b, m, deterministic)
}
func (m *EncodedToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncodedToken.Merge(m, src)
}
func (m *EncodedToken) XXX_Size() int {
	return xxx_messageInfo_EncodedToken.Size(m)
}
func (m *EncodedToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EncodedToken.DiscardUnknown(m)
}

var xxx_messageInfo_EncodedToken proto.InternalMessageInfo

func (m *EncodedToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TempTokenInfo struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expiration           int64    `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Purpose              string   `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	UserId               string   `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Info                 string   `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	InstanceId           string   `protobuf:"bytes,6,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TempTokenInfo) Reset()         { *m = TempTokenInfo{} }
func (m *TempTokenInfo) String() string { return proto.CompactTextString(m) }
func (*TempTokenInfo) ProtoMessage()    {}
func (*TempTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{1}
}

func (m *TempTokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempTokenInfo.Unmarshal(m, b)
}
func (m *TempTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempTokenInfo.Marshal(b, m, deterministic)
}
func (m *TempTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempTokenInfo.Merge(m, src)
}
func (m *TempTokenInfo) XXX_Size() int {
	return xxx_messageInfo_TempTokenInfo.Size(m)
}
func (m *TempTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TempTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TempTokenInfo proto.InternalMessageInfo

func (m *TempTokenInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TempTokenInfo) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *TempTokenInfo) GetPurpose() string {
	if m != nil {
		return m.Purpose
	}
	return ""
}

func (m *TempTokenInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TempTokenInfo) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *TempTokenInfo) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type TempTokenInfos struct {
	TempTokens           []*TempTokenInfo `protobuf:"bytes,1,rep,name=temp_tokens,json=tempTokens,proto3" json:"temp_tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TempTokenInfos) Reset()         { *m = TempTokenInfos{} }
func (m *TempTokenInfos) String() string { return proto.CompactTextString(m) }
func (*TempTokenInfos) ProtoMessage()    {}
func (*TempTokenInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{2}
}

func (m *TempTokenInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempTokenInfos.Unmarshal(m, b)
}
func (m *TempTokenInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempTokenInfos.Marshal(b, m, deterministic)
}
func (m *TempTokenInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempTokenInfos.Merge(m, src)
}
func (m *TempTokenInfos) XXX_Size() int {
	return xxx_messageInfo_TempTokenInfos.Size(m)
}
func (m *TempTokenInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_TempTokenInfos.DiscardUnknown(m)
}

var xxx_messageInfo_TempTokenInfos proto.InternalMessageInfo

func (m *TempTokenInfos) GetTempTokens() []*TempTokenInfo {
	if m != nil {
		return m.TempTokens
	}
	return nil
}

type TempToken struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TempToken) Reset()         { *m = TempToken{} }
func (m *TempToken) String() string { return proto.CompactTextString(m) }
func (*TempToken) ProtoMessage()    {}
func (*TempToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e86308594dc230, []int{3}
}

func (m *TempToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TempToken.Unmarshal(m, b)
}
func (m *TempToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TempToken.Marshal(b, m, deterministic)
}
func (m *TempToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempToken.Merge(m, src)
}
func (m *TempToken) XXX_Size() int {
	return xxx_messageInfo_TempToken.Size(m)
}
func (m *TempToken) XXX_DiscardUnknown() {
	xxx_messageInfo_TempToken.DiscardUnknown(m)
}

var xxx_messageInfo_TempToken proto.InternalMessageInfo

func (m *TempToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*EncodedToken)(nil), "influenzanet.auth_service_api.EncodedToken")
	proto.RegisterType((*TempTokenInfo)(nil), "influenzanet.auth_service_api.TempTokenInfo")
	proto.RegisterType((*TempTokenInfos)(nil), "influenzanet.auth_service_api.TempTokenInfos")
	proto.RegisterType((*TempToken)(nil), "influenzanet.auth_service_api.TempToken")
}

func init() { proto.RegisterFile("auth-service-api.proto", fileDescriptor_e8e86308594dc230) }

var fileDescriptor_e8e86308594dc230 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdf, 0x6b, 0x13, 0x41,
	0x10, 0x26, 0xa6, 0x4d, 0xec, 0xa4, 0x4d, 0x60, 0x29, 0xf5, 0x3c, 0xa9, 0xc6, 0xe0, 0x43, 0x40,
	0x73, 0x27, 0x11, 0x7c, 0x6f, 0x35, 0x94, 0x88, 0x42, 0xc9, 0x8f, 0x16, 0x44, 0x09, 0x9b, 0xdc,
	0xe4, 0xb2, 0x78, 0xd9, 0x5d, 0x6e, 0xe7, 0xd4, 0xf8, 0x1f, 0xf9, 0xe0, 0xff, 0x28, 0xb7, 0xd7,
	0x2b, 0x39, 0x08, 0xda, 0x7b, 0xe8, 0xdb, 0xce, 0xcc, 0x37, 0xdf, 0x7d, 0xb3, 0xdf, 0xce, 0xc1,
	0x09, 0x4f, 0x68, 0xd5, 0x33, 0x18, 0x7f, 0x17, 0x0b, 0xec, 0x71, 0x2d, 0x3c, 0x1d, 0x2b, 0x52,
	0xec, 0x54, 0xc8, 0x65, 0x94, 0xa0, 0xfc, 0xc5, 0x25, 0x92, 0x97, 0x82, 0x66, 0x37, 0xa0, 0x19,
	0xd7, 0xc2, 0x65, 0x61, 0xa4, 0xe6, 0x3c, 0xea, 0xd1, 0x46, 0xa3, 0xc9, 0x5a, 0xdc, 0x27, 0xa1,
	0x52, 0x61, 0x84, 0xbe, 0x8d, 0xe6, 0xc9, 0xd2, 0xc7, 0xb5, 0xa6, 0x4d, 0x56, 0xec, 0xbc, 0x80,
	0xc3, 0x81, 0x5c, 0xa8, 0x00, 0x83, 0x89, 0xfa, 0x86, 0x92, 0x1d, 0xc3, 0x3e, 0xa5, 0x07, 0xa7,
	0xd2, 0xae, 0x74, 0x0f, 0x46, 0x59, 0xd0, 0xf9, 0x53, 0x81, 0xa3, 0x09, 0xae, 0xb5, 0xc5, 0x0c,
	0xe5, 0x52, 0xed, 0xc6, 0xb1, 0xa7, 0x00, 0xf8, 0x53, 0x8b, 0x98, 0x93, 0x50, 0xd2, 0x79, 0xd0,
	0xae, 0x74, 0xab, 0xa3, 0xad, 0x0c, 0x73, 0xa0, 0xae, 0x93, 0x58, 0x2b, 0x83, 0x4e, 0xd5, 0xf6,
	0xe5, 0x21, 0x7b, 0x04, 0xf5, 0xc4, 0x60, 0x3c, 0x13, 0x81, 0xb3, 0x67, 0x2b, 0xb5, 0x34, 0x1c,
	0x06, 0x8c, 0xc1, 0x9e, 0x90, 0x4b, 0xe5, 0xec, 0xdb, 0xac, 0x3d, 0xb3, 0x67, 0xd0, 0x10, 0xd2,
	0x10, 0x97, 0x0b, 0x4c, 0x1b, 0x6a, 0xb6, 0x04, 0x79, 0x6a, 0x18, 0x74, 0x66, 0xd0, 0x2c, 0xc8,
	0x35, 0xec, 0x13, 0x34, 0x08, 0xd7, 0x7a, 0x66, 0x75, 0x1a, 0xa7, 0xd2, 0xae, 0x76, 0x1b, 0xfd,
	0x57, 0xde, 0x3f, 0x6f, 0xd3, 0x2b, 0x70, 0x8c, 0x80, 0xf2, 0xd0, 0x74, 0x9e, 0xc3, 0xc1, 0x6d,
	0x71, 0xf7, 0x5d, 0xf4, 0x7f, 0xd7, 0xa1, 0x79, 0x96, 0xd0, 0x6a, 0x9c, 0x11, 0x9e, 0x69, 0xc1,
	0xde, 0x42, 0x6d, 0x4c, 0x9c, 0x12, 0xc3, 0x4e, 0xbc, 0xcc, 0x14, 0x2f, 0x37, 0xc5, 0x1b, 0xa4,
	0xa6, 0xb8, 0xc7, 0x45, 0x45, 0x37, 0xe8, 0x2f, 0xd0, 0xfc, 0xa8, 0x42, 0x21, 0xaf, 0x05, 0xad,
	0x06, 0x6b, 0x2e, 0x22, 0x76, 0x5a, 0xc4, 0x4d, 0x0d, 0xc6, 0xef, 0x62, 0x0c, 0x50, 0x92, 0xe0,
	0x91, 0x71, 0x5f, 0xfe, 0x67, 0xb0, 0x82, 0xe5, 0x5f, 0xa1, 0x35, 0x16, 0xa1, 0x4c, 0xf4, 0xfd,
	0xd0, 0x4f, 0xa1, 0x71, 0xc5, 0x23, 0x11, 0x70, 0xc2, 0x0f, 0xd7, 0x13, 0x56, 0xa6, 0xd7, 0x7d,
	0x5c, 0x04, 0x5f, 0xf2, 0xd8, 0xe4, 0xb4, 0x01, 0x3c, 0x1c, 0xa1, 0xc4, 0x1f, 0xa5, 0x39, 0x4b,
	0x89, 0x0f, 0xe1, 0xe8, 0x02, 0x25, 0xc6, 0x9c, 0x30, 0x4b, 0x94, 0x7a, 0x32, 0x6e, 0xf7, 0xae,
	0x68, 0xb6, 0x84, 0xc3, 0x2b, 0x1e, 0x05, 0xb7, 0xdf, 0xb9, 0x73, 0xa7, 0x5b, 0x4a, 0x11, 0x93,
	0xd0, 0xba, 0x40, 0xca, 0x5e, 0xf1, 0xf9, 0x26, 0x35, 0xb6, 0xe4, 0x48, 0xbd, 0x32, 0x68, 0xbb,
	0x77, 0xef, 0x31, 0xc2, 0xf2, 0x63, 0xed, 0xde, 0x84, 0x29, 0xb4, 0x2e, 0x93, 0x38, 0xc4, 0x54,
	0x78, 0x36, 0x44, 0x49, 0xf9, 0x3b, 0x69, 0xcf, 0xfb, 0x9f, 0x5f, 0x87, 0x82, 0x56, 0xc9, 0xdc,
	0x5b, 0xa8, 0xb5, 0xbf, 0x8d, 0xf0, 0xb9, 0x16, 0x7e, 0x20, 0x0c, 0xf9, 0xa1, 0xf2, 0xb7, 0xff,
	0xc9, 0xf3, 0x9a, 0x5d, 0xdd, 0x37, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xc7, 0xfc, 0xc5,
	0xaa, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthServiceApiClient is the client API for AuthServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*_go.Status, error)
	// Auth:
	LoginWithEmail(ctx context.Context, in *_go.UserCredentials, opts ...grpc.CallOption) (*EncodedToken, error)
	SignupWithEmail(ctx context.Context, in *_go.UserCredentials, opts ...grpc.CallOption) (*EncodedToken, error)
	// Token handling:
	ValidateJWT(ctx context.Context, in *EncodedToken, opts ...grpc.CallOption) (*_go.ParsedToken, error)
	RenewJWT(ctx context.Context, in *EncodedToken, opts ...grpc.CallOption) (*EncodedToken, error)
	// Temporary Tokens handling:
	GenerateToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error)
	ValdateToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error)
	GetTokensByUser(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error)
	DeleteToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*_go.Status, error)
	PurgeUserTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*_go.Status, error)
}

type authServiceApiClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceApiClient(cc *grpc.ClientConn) AuthServiceApiClient {
	return &authServiceApiClient{cc}
}

func (c *authServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*_go.Status, error) {
	out := new(_go.Status)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) LoginWithEmail(ctx context.Context, in *_go.UserCredentials, opts ...grpc.CallOption) (*EncodedToken, error) {
	out := new(EncodedToken)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/LoginWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) SignupWithEmail(ctx context.Context, in *_go.UserCredentials, opts ...grpc.CallOption) (*EncodedToken, error) {
	out := new(EncodedToken)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/SignupWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValidateJWT(ctx context.Context, in *EncodedToken, opts ...grpc.CallOption) (*_go.ParsedToken, error) {
	out := new(_go.ParsedToken)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/ValidateJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) RenewJWT(ctx context.Context, in *EncodedToken, opts ...grpc.CallOption) (*EncodedToken, error) {
	out := new(EncodedToken)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) GenerateToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error) {
	out := new(TempToken)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) ValdateToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error) {
	out := new(TempTokenInfo)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/ValdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) GetTokensByUser(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error) {
	out := new(TempTokenInfos)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/GetTokensByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) DeleteToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*_go.Status, error) {
	out := new(_go.Status)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceApiClient) PurgeUserTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*_go.Status, error) {
	out := new(_go.Status)
	err := c.cc.Invoke(ctx, "/influenzanet.auth_service_api.AuthServiceApi/PurgeUserTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceApiServer is the server API for AuthServiceApi service.
type AuthServiceApiServer interface {
	Status(context.Context, *empty.Empty) (*_go.Status, error)
	// Auth:
	LoginWithEmail(context.Context, *_go.UserCredentials) (*EncodedToken, error)
	SignupWithEmail(context.Context, *_go.UserCredentials) (*EncodedToken, error)
	// Token handling:
	ValidateJWT(context.Context, *EncodedToken) (*_go.ParsedToken, error)
	RenewJWT(context.Context, *EncodedToken) (*EncodedToken, error)
	// Temporary Tokens handling:
	GenerateToken(context.Context, *TempTokenInfo) (*TempToken, error)
	ValdateToken(context.Context, *TempToken) (*TempTokenInfo, error)
	GetTokensByUser(context.Context, *TempTokenInfo) (*TempTokenInfos, error)
	DeleteToken(context.Context, *TempToken) (*_go.Status, error)
	PurgeUserTokens(context.Context, *TempTokenInfo) (*_go.Status, error)
}

func RegisterAuthServiceApiServer(s *grpc.Server, srv AuthServiceApiServer) {
	s.RegisterService(&_AuthServiceApi_serviceDesc, srv)
}

func _AuthServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_LoginWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.UserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).LoginWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/LoginWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).LoginWithEmail(ctx, req.(*_go.UserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_SignupWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.UserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).SignupWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/SignupWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).SignupWithEmail(ctx, req.(*_go.UserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValidateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodedToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValidateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/ValidateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValidateJWT(ctx, req.(*EncodedToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodedToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).RenewJWT(ctx, req.(*EncodedToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).GenerateToken(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_ValdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).ValdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/ValdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).ValdateToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_GetTokensByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).GetTokensByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/GetTokensByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).GetTokensByUser(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).DeleteToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceApi_PurgeUserTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceApiServer).PurgeUserTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.auth_service_api.AuthServiceApi/PurgeUserTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceApiServer).PurgeUserTokens(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.auth_service_api.AuthServiceApi",
	HandlerType: (*AuthServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _AuthServiceApi_Status_Handler,
		},
		{
			MethodName: "LoginWithEmail",
			Handler:    _AuthServiceApi_LoginWithEmail_Handler,
		},
		{
			MethodName: "SignupWithEmail",
			Handler:    _AuthServiceApi_SignupWithEmail_Handler,
		},
		{
			MethodName: "ValidateJWT",
			Handler:    _AuthServiceApi_ValidateJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _AuthServiceApi_RenewJWT_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _AuthServiceApi_GenerateToken_Handler,
		},
		{
			MethodName: "ValdateToken",
			Handler:    _AuthServiceApi_ValdateToken_Handler,
		},
		{
			MethodName: "GetTokensByUser",
			Handler:    _AuthServiceApi_GetTokensByUser_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _AuthServiceApi_DeleteToken_Handler,
		},
		{
			MethodName: "PurgeUserTokens",
			Handler:    _AuthServiceApi_PurgeUserTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth-service-api.proto",
}
