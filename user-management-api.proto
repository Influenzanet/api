syntax = "proto3";

package inf.user_management_api;
option go_package = "api";

import "global-types.proto";
import "google/protobuf/empty.proto";

service UserManagementApi {
  rpc Status(google.protobuf.Empty) returns (inf.Status);

  // Auth and Token handling:
  rpc LoginWithEmail(LoginWithEmailMsg) returns (UserAuthInfo);
  rpc SignupWithEmail(SignupWithEmailMsg) returns (UserAuthInfo);
  rpc CheckRefreshToken(RefreshTokenRequest) returns (inf.Status);
  rpc TokenRefreshed(RefreshTokenRequest)
      returns (inf.Status); // Notify User management when token refreshed and
  // send newly generated refresh token
  rpc SwitchProfile(ProfileRequest) returns (UserAuthInfo);

  // User properties:
  rpc GetUser(UserReference) returns (User);

  // Account methods:
  rpc ChangePassword(PasswordChangeMsg) returns (inf.Status);
  rpc ChangeAccountIDEmail(EmailChangeMsg) returns (User);
  rpc DeleteAccount(UserReference) returns (inf.Status);
  rpc ChangePreferredLanguage(LanguageChangeMsg) returns (User);

  // Profile methods:
  rpc SaveProfile(ProfileRequest) returns (User); // add or update a profle
  rpc RemoveProfile(ProfileRequest) returns (User);

  // Contacts:
  rpc UpdateContactPreferences(ContactPreferencesMsg) returns (User);
  rpc AddEmail(ContactInfoMsg) returns (User);
  rpc RemoveEmail(ContactInfoMsg) returns (User);
}

message User {
  message Account {
    string type = 1; // email-pw, or other
    string account_id = 2;
    int64 account_confirmed_at = 3;
    string preferred_language = 4;
  }
  message Timestamps {
    int64 created_at = 1;
    int64 updated_at = 2;
    int64 last_login = 3;
    int64 last_token_refresh = 4;
  }

  string id = 1;
  Account account = 2;
  repeated string roles = 3;
  Timestamps timestamps = 4;
  repeated Profile profiles = 5;
  ContactPreferences contact_preferences = 6;
  repeated ContactInfo contact_infos = 7;
}

message ContactInfo {
  string id = 1;
  string type = 2; // e.g. email, phone
  int64 confirmed_at = 3;
  oneof address {
    string email = 4;
    string phone = 5;
  }
}

message ContactPreferences {
  bool subscribed_to_newletter = 1;
  repeated string send_newsletter_to = 2; // list of contact info ids
}

message SignupWithEmailMsg {
  string email = 1;
  string password = 2;
  string instance_id = 3;
  string preferred_language = 4;
  bool wants_newsletter = 5;
}

message LoginWithEmailMsg {
  string email = 1;
  string password = 2;
  string instance_id = 3;
}

message UserReference {
  inf.TokenInfos token = 1;
  string user_id = 2;
  string instance_id = 3;
}

message RefreshTokenRequest {
  string user_id = 1;
  string instance_id = 2;
  string refresh_token = 3;
}

message Profile {
  string id = 1;
  string nickname = 2; // we don't ask for real names - just that the user can
                       // identify the profile
  int64 consent_confirmed_at = 3; // when the user confirm that he/she has the
                                  // consent to enter data for this indivildual
  string avatar_id = 4;           // id of predifined avatar
  int64 created_at = 5;           // timestamp of profile creation
}

message ProfileRequest {
  inf.TokenInfos token = 1;
  Profile profile = 2;
}

message UserAuthInfo {
  string user_id = 1;
  repeated string roles = 2;
  string instance_id = 3;
  string account_id = 4; // e.g. email address
  repeated Profile profiles = 5;
  Profile selected_profile = 6;
  bool account_confirmed = 7;
  string preferred_language = 8;
}

message PasswordChangeMsg {
  inf.TokenInfos token = 1;
  string old_password = 2;
  string new_password = 3;
}

message EmailChangeMsg {
  inf.TokenInfos token = 1;
  string new_email = 2;
}

message LanguageChangeMsg {
  inf.TokenInfos token = 1;
  string language_code = 2;
}

message ContactPreferencesMsg {
  inf.TokenInfos token = 1;
  ContactPreferences contact_preferences = 2;
}

message ContactInfoMsg {
  inf.TokenInfos token = 1;
  ContactInfo contact_info = 2;
}
